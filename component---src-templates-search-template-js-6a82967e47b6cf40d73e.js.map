{"version":3,"sources":["webpack:///./src/components/Search/BlogList/BlogList.js","webpack:///./src/components/Search/Search.js","webpack:///./src/templates/search-template.js"],"names":["BlogList","props","edges","filters","year","month","selectedCategory","selectedTags","react_default","a","createElement","es","_ref","location","className","styles","map","edge","gatsby_browser_entry","key","node","fields","slug","to","state","from","pathname","dateTime","moment","frontmatter","date","format","getLanguage","title","tags","Icon","icon","getIcon","tag","Search","totalCount","language","savedFilter","categoriesList","useCategoriesListJa","useCategoriesList","_useState","useState","setSelectedCategory","_useState2","setSelectedTags","_useState3","setTags","_useState4","blogs","setBlogs","_useState5","blogsInSelectedCategory","setBlogsInSelectedCategory","_useState6","number","setNumber","_useState7","setYear","_useState8","setMonth","useEffect","savedCategory","savedTags","blogsInCategory","filterBlogByCategory","filterBlogs","getTags","setBlogsAndNumber","length","forEach","blog","_tags","push","apply","_toConsumableArray","tagsSet","Set","Array","category","filter","includesAllTags","array","i","includes","clearYear","clearMonth","clearTagFilter","clearCategoryFilter","clearFilter","onClickClearCategory","onYearSelect","event","target","value","targetMonth","filteredBlogs","slice","substr","filterBlogByTags","onMonthSelect","renderClearButton","clearFunction","onClick","onChange","options","toString","option","renderMonthSelect","onClickCategory","fieldValue","clickedTag","concat","Search_BlogList_BlogList","__webpack_require__","d","__webpack_exports__","query","SearchTemplate","data","pageContext","siteTitle","useSiteMetadata","titleJa","siteSubtitle","subtitle","subtitleJa","allMarkdownRemark","pageTitle","Layout","description","Sidebar","isIndex","Page","components_Search_Search"],"mappings":"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","file":"component---src-templates-search-template-js-6a82967e47b6cf40d73e.js","sourcesContent":["// @flow\nimport React from 'react';\nimport moment from 'moment';\nimport { Link } from 'gatsby';\nimport { Location } from '@reach/router';\nimport { getIcon } from '../../../utils';\nimport Icon from '../../Icon';\nimport type { Edges } from '../../../types';\nimport styles from './BlogList.module.scss';\nimport { getLanguage } from '../../../utils/languageContext';\n\ntype Props = {\n  edges: Edges\n};\n\nconst BlogList = (props: Props) => {\n  const { edges, filters } = props;\n  const year = filters ? filters.year : '';\n  const month = filters ? filters.month : '';\n  const selectedCategory = filters ? filters.selectedCategory : '';\n  const selectedTags = filters ? filters.selectedTags : [];\n\n  return (\n    <Location>\n      {({ location }) => {\n        return (\n          <div className={styles['blog-list']}>\n            {edges.map(edge => {\n              return (\n                <Link\n                  className={styles['blog-list__item-title-link']}\n                  key={edge.node.fields.slug}\n                  to={edge.node.fields.slug}\n                  state={{\n                    from: location.pathname,\n                    year,\n                    month,\n                    selectedCategory,\n                    selectedTags\n                  }}\n                >\n                  <div className={styles['blog-list__item']}>\n                    <div className={styles['blog-list__item-meta']}>\n                      <time\n                        className={styles['blog-list__item-meta-time']}\n                        dateTime={moment(edge.node.frontmatter.date).format(\n                          'MMMM D, YYYY'\n                        )}\n                      >\n                        {moment(edge.node.frontmatter.date).format(\n                          getLanguage(location.pathname) === 'en'\n                            ? 'MMMM D, YYYY'\n                            : 'YYYY/MM/DD'\n                        )}\n                      </time>\n                      <span\n                        className={styles['blog-list__item-meta-divider']}\n                      />\n                    </div>\n                    <h2 className={styles['blog-list__item-title']}>\n                      {edge.node.frontmatter.title}\n                    </h2>\n                    {edge.node.frontmatter.tags ? (\n                      <div className={styles['blog-list__tags']}>\n                        <Icon icon={getIcon('tag')} />\n                        {edge.node.frontmatter.tags.map(tag => {\n                          return <span key={tag}>{tag}</span>;\n                        })}\n                      </div>\n                    ) : null}\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        );\n      }}\n    </Location>\n  );\n};\n\nexport default BlogList;\n","// @flow\nimport React, { useState, useEffect } from 'react';\nimport type { Edges } from '../../types';\nimport BlogList from './BlogList';\nimport styles from './Search.module.scss';\nimport { useCategoriesList, useCategoriesListJa } from '../../hooks';\n\ntype Props = {\n  edges: Edges\n};\n\nconst Search = ({ edges, totalCount, language, savedFilter }: Props) => {\n  const categoriesList =\n    language === 'ja' ? useCategoriesListJa() : useCategoriesList();\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [selectedTags, setSelectedTags] = useState('');\n  const [tags, setTags] = useState([]);\n  const [blogs, setBlogs] = useState([]);\n  const [blogsInSelectedCategory, setBlogsInSelectedCategory] = useState([]);\n  const [number, setNumber] = useState([]);\n  const [year, setYear] = useState('');\n  const [month, setMonth] = useState('');\n\n  useEffect(() => {\n    if (savedFilter) {\n      let year = savedFilter.year;\n      let month = savedFilter.month;\n      let savedCategory = savedFilter.selectedCategory;\n      let savedTags = savedFilter.selectedTags;\n      let blogsInCategory = filterBlogByCategory(savedCategory);\n      filterBlogs(year, month, savedCategory, savedTags);\n      setYear(year);\n      setMonth(month);\n      setSelectedCategory(savedCategory);\n      setSelectedTags(savedTags ? savedTags : []);\n      setTags(getTags(blogsInCategory));\n      setBlogsInSelectedCategory(blogsInCategory);\n    } else {\n      setBlogsAndNumber(edges, totalCount);\n    }\n  }, []);\n\n  const setBlogsAndNumber = (blogs, number = blogs.length) => {\n    setBlogs(blogs);\n    setNumber(number);\n  };\n\n  const onClickCategory = category => {\n    if (category === selectedCategory) {\n      clearFilter();\n      filterBlogs(year, month, '', '');\n    } else {\n      setSelectedCategory(category);\n      let blogs = filterBlogByCategory(category);\n      setTags(getTags(blogs));\n      setBlogsInSelectedCategory(blogs);\n      setSelectedTags([]);\n      filterBlogs(year, month, category, null);\n    }\n  };\n\n  const getTags = blogs => {\n    let tags = [];\n    blogs.forEach(blog => {\n      if (blog.node.frontmatter.tags) {\n        tags.push(...blog.node.frontmatter.tags);\n      }\n    });\n    let tagsSet = new Set(tags);\n    tags = Array.from(tagsSet);\n    return tags;\n  };\n\n  const onClickTag = clickedTag => {\n    let tags = [];\n    if (!selectedTags.length) {\n      tags.push(clickedTag);\n    } else if (selectedTags.includes(clickedTag)) {\n      tags = selectedTags.filter(tag => tag !== clickedTag);\n    } else {\n      tags = [...selectedTags, clickedTag];\n    }\n    setSelectedTags(tags);\n    filterBlogs(year, month, selectedCategory, tags);\n  };\n\n  const filterBlogByCategory = (category, blogs = edges) => {\n    return blogs.filter(edge => edge.node.frontmatter.category === category);\n  };\n\n  const filterBlogByTags = (tags, blogs = blogsInSelectedCategory) => {\n    return blogs.filter(blog =>\n      includesAllTags(tags, blog.node.frontmatter.tags)\n    );\n  };\n\n  const includesAllTags = (tags, array) => {\n    for (let i = 0; i < tags.length; i++) {\n      if (!array.includes(tags[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const clearYear = () => {\n    setMonth('00');\n    setYear('00');\n    filterBlogs('', '', selectedCategory, selectedTags);\n  };\n\n  const clearMonth = () => {\n    setMonth('00');\n    filterBlogs(year, '', selectedCategory, selectedTags);\n  };\n\n  const clearTagFilter = () => {\n    setSelectedTags([]);\n    filterBlogs(year, month, selectedCategory, '');\n  };\n\n  const clearCategoryFilter = () => {\n    setSelectedCategory('');\n    setTags([]);\n    setSelectedTags([]);\n    setBlogsInSelectedCategory([]);\n  };\n\n  const clearFilter = () => {\n    setYear('');\n    setMonth('');\n    clearCategoryFilter();\n    setBlogsAndNumber(edges, totalCount);\n  };\n\n  const getBlogYears = () => {\n    return Array.from(\n      new Set(edges.map(edge => edge.node.frontmatter.date.substr(0, 4)))\n    );\n  };\n\n  const onClickClearCategory = () => {\n    clearCategoryFilter();\n    setBlogsAndNumber(edges, totalCount);\n    filterBlogs(year, month, '', '');\n  };\n\n  const onYearSelect = event => {\n    let year = event.target.value;\n    let targetMonth = month;\n    if (year === '00') {\n      setMonth('00');\n      targetMonth = '';\n    }\n    setYear(year);\n    filterBlogs(\n      event.target.value,\n      targetMonth,\n      selectedCategory,\n      selectedTags\n    );\n  };\n\n  const filterBlogs = (year, month, category, tags) => {\n    let filteredBlogs = edges.slice();\n    // year & month\n    if (month && month !== '00') {\n      filteredBlogs = filteredBlogs.filter(blog => {\n        return blog.node.frontmatter.date.substr(0, 7) === `${year}-${month}`;\n      });\n      // year\n    } else if (year && year !== '00') {\n      filteredBlogs = filteredBlogs.filter(blog => {\n        return blog.node.frontmatter.date.substr(0, 4) === year;\n      });\n    }\n    // category & tags\n    if (tags && tags.length) {\n      filteredBlogs = filterBlogByCategory(category, filteredBlogs);\n      filteredBlogs = filterBlogByTags(tags, filteredBlogs);\n      // category\n    } else if (category) {\n      filteredBlogs = filterBlogByCategory(category, filteredBlogs);\n    }\n    setBlogsAndNumber(filteredBlogs);\n  };\n\n  const renderYearSelect = () => {\n    return (\n      <div className={styles['search__filter__date-year']}>\n        <select value={year} onChange={onYearSelect}>\n          <option key=\"00\" value=\"00\">\n            {language === 'en' ? 'Year' : '年'}\n          </option>\n          {getBlogYears().map(year => {\n            return (\n              <option key={year} value={year}>\n                {year}\n              </option>\n            );\n          })}\n        </select>\n        {year && year !== '00' ? renderClearButton(clearYear) : null}\n      </div>\n    );\n  };\n\n  const onMonthSelect = event => {\n    setMonth(event.target.value);\n    filterBlogs(year, event.target.value, selectedCategory, selectedTags);\n  };\n\n  const renderMonthSelect = () => {\n    if (language === 'en') {\n      return (\n        <div className={styles['search__filter__date-month']}>\n          <select value={month} onChange={onMonthSelect}>\n            <option key=\"00\" value=\"00\">\n              Month\n            </option>\n            <option key=\"01\" value=\"01\">\n              January\n            </option>\n            <option key=\"02\" value=\"02\">\n              February\n            </option>\n            <option key=\"03\" value=\"03\">\n              March\n            </option>\n            <option key=\"04\" value=\"04\">\n              April\n            </option>\n            <option key=\"05\" value=\"05\">\n              May\n            </option>\n            <option key=\"06\" value=\"06\">\n              June\n            </option>\n            <option key=\"07\" value=\"07\">\n              July\n            </option>\n            <option key=\"08\" value=\"08\">\n              August\n            </option>\n            <option key=\"09\" value=\"09\">\n              September\n            </option>\n            <option key=\"10\" value=\"10\">\n              October\n            </option>\n            <option key=\"11\" value=\"11\">\n              November\n            </option>\n            <option key=\"12\" value=\"12\">\n              December\n            </option>\n          </select>\n          {month && month !== '00' ? renderClearButton(clearMonth) : null}\n        </div>\n      );\n    }\n\n    let options = [];\n    for (let i = 1; i <= 12; i++) {\n      let value = i < 10 ? '0' + i.toString() : i.toString();\n      options.push(\n        <option key={value} value={value}>\n          {i + '月'}\n        </option>\n      );\n    }\n    return (\n      <select value={month} onChange={onMonthSelect}>\n        <option key=\"00\" value=\"00\">\n          月\n        </option>\n        {options.map(option => option)}\n      </select>\n    );\n  };\n\n  const renderCategories = () => {\n    return (\n      <div className={styles['search__filter__categories']}>\n        <div className={styles['search__filter__categories-title']}>\n          <span>{language === 'en' ? 'Category' : 'カテゴリー'}</span>{' '}\n          {selectedCategory ? renderClearButton(onClickClearCategory) : null}\n        </div>\n        <ul className={styles['search__filter__categories-list']}>\n          {categoriesList.map(category => {\n            return (\n              <li\n                onClick={() => onClickCategory(category.fieldValue)}\n                key={category.fieldValue}\n                className={\n                  selectedCategory\n                    ? selectedCategory.includes(category.fieldValue)\n                      ? styles['search__filter__categories-list-item-selected']\n                      : ''\n                    : ''\n                }\n              >\n                {category.fieldValue}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  };\n\n  const renderTags = () => {\n    return (\n      <div className={styles['search__filter__tags']}>\n        <div className={styles['search__filter__tags-title']}>\n          <span>{language === 'en' ? 'Tags' : 'タグ'}</span>{' '}\n          {selectedTags.length ? renderClearButton(clearTagFilter) : null}\n        </div>\n        <ul className={styles['search__filter__tags-list']}>\n          {tags.map(tag => {\n            return (\n              <li\n                onClick={() => onClickTag(tag)}\n                key={tag}\n                className={\n                  selectedTags.includes(tag)\n                    ? styles['search__filter__tags-list-item-selected']\n                    : ''\n                }\n              >\n                {tag}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  };\n\n  const renderClearButton = clearFunction => {\n    return (\n      <span\n        onClick={clearFunction}\n        className={styles['search__filter__clear-specific']}\n      >\n        ×\n      </span>\n    );\n  };\n\n  const renderClearFilterButton = () => {\n    return (\n      <div>\n        <span onClick={clearFilter} className={styles['search__filter__clear']}>\n          {language === 'en' ? '→ All posts' : '→ 全ブログ'}\n        </span>\n      </div>\n    );\n  };\n\n  const renderCount = () => {\n    return (\n      <div className={styles['search__count']}>\n        {selectedCategory || (year && year !== '00')\n          ? number === 0\n            ? language === 'en'\n              ? 'No posts found'\n              : '該当ブログがありません'\n            : language === 'en'\n            ? `${number} post${number > 1 ? 's' : ''} found`\n            : `該当ブログ: ${number}`\n          : language === 'en'\n          ? `${number} posts`\n          : `全${number}件`}\n      </div>\n    );\n  };\n\n  return (\n    <div className={styles['search']}>\n      <h1 className={styles['search__title']}>\n        {language === 'en' ? 'Search' : '検索'}\n      </h1>\n      <div className={styles['search__filter']}>\n        <div className={styles['search__filter__date']}>\n          {renderYearSelect()}\n          {year && year !== '00' ? renderMonthSelect() : null}\n        </div>\n        {renderCategories()}\n        {tags.length ? renderTags() : null}\n        {(year && year !== '00') || selectedCategory\n          ? renderClearFilterButton()\n          : null}\n      </div>\n\n      {renderCount()}\n      <BlogList\n        edges={blogs}\n        filters={\n          year || month || selectedCategory\n            ? {\n                year: year,\n                month: month,\n                selectedCategory: selectedCategory,\n                selectedTags: selectedTags\n              }\n            : null\n        }\n      />\n    </div>\n  );\n};\n\nexport default Search;\n","// @flow\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport Sidebar from '../components/Sidebar';\nimport Page from '../components/Page';\nimport Search from '../components/Search';\nimport { useSiteMetadata } from '../hooks';\nimport type { PageContext, AllMarkdownRemark } from '../types';\n\ntype Props = {\n  data: AllMarkdownRemark,\n  pageContext: PageContext\n};\n\nconst SearchTemplate = ({ data, pageContext, location }: Props) => {\n  const { language } = pageContext;\n  const siteTitle =\n    language === 'en' ? useSiteMetadata().title : useSiteMetadata().titleJa;\n  const siteSubtitle =\n    language === 'en'\n      ? useSiteMetadata().subtitle\n      : useSiteMetadata().subtitleJa;\n  const { edges } = data.allMarkdownRemark;\n  const pageTitle = `${language === 'en' ? 'Search' : '検索'} - ${siteTitle}`;\n\n  return (\n    <Layout title={pageTitle} description={siteSubtitle}>\n      <Sidebar isIndex />\n      <Page>\n        <Search\n          totalCount={data.allMarkdownRemark.totalCount}\n          edges={edges}\n          language={language}\n          savedFilter={location.state}\n        />\n      </Page>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query SearchTemplate($language: String!) {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: {\n          template: { eq: \"post\" }\n          draft: { ne: true }\n          language: { eq: $language }\n        }\n      }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            categorySlug\n          }\n          frontmatter {\n            title\n            date\n            category\n            tags\n            description\n          }\n        }\n      }\n      totalCount\n    }\n  }\n`;\n\nexport default SearchTemplate;\n"],"sourceRoot":""}